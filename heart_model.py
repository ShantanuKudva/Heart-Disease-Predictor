# -*- coding: utf-8 -*-
"""Heart Disease Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1seE87a1WM0l85Lx2M-1Iea6KzFFBYMA9

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import accuracy_score

"""Data collection and processing """

#Loading the csv data to a pandas Dataframe
heart_data=pd.read_csv("data.csv")

#print first 5 rows of the dataset
heart_data.head()

#number of rows and columns in the dataset
heart_data.shape

#getting additional info of the dataset
heart_data.info()

#checking for any missing values
heart_data.isnull()
heart_data.isnull().sum()

#statistical measure of the data
heart_data.describe()

#checking the distribution of the target variable
heart_data['target'].value_counts()

"""1 represents Unhealthy Heart

0 represents healthy Heart

splitting the feature and the target
"""

X=heart_data.drop(columns="target" ,axis=1)
Y=heart_data["target"]

print(X)

print(Y)

"""Splitting the data into testing data and training data

"""

X_train,X_test,Y_train,Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

KNeighborsRegressor
"""

model=KNeighborsRegressor()

#training the LogisticRegression model with training data
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

#accuracy on training data
X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction, Y_train)

print("Accuracy on Training Data= ", training_data_accuracy)

#accuracy on test data
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction, Y_test)

print("Accuracy on Testing Data= ", test_data_accuracy)

"""Building a predictive system

"""

input_data=(57,1,2,128,229,0,0,150,0,0.4,1,1,3)


#change the data to a numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshape the numpy array as we are prediction for one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

prediction=model.predict(input_data_reshaped)

if(prediction[0]==0):
  print("The person does not have a heart disease")
else:
  print("The person has a heart disease")

